document.addEventListener("DOMContentLoaded", async function () {
    const token = localStorage.getItem('jwt');

    if (!token) {
        showAlert("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...", "error");
        setTimeout(() => window.location.href = '/login.html', 2000);
        return;
    }

    try {
        const response = await fetch('/api/auth/validate-token', {
            method: 'GET',
            headers: { 'Authorization': `Bearer ${token}` }
        });
        if (!response.ok) {
            showAlert("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...", "error");
            setTimeout(() => window.location.href = '/login.html', 2000);
            return;
        }
        const data = await response.json();
        if (data.role !== 'ROLE_ADMIN') {
            showAlert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–¥–∞—á...", "error");
            setTimeout(() => window.location.href = '/tasks.html', 2000);
        }
    } catch (error) {
        showAlert("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", "error");
        console.error(error);
    }
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showAlert(message, type = "success") {
    const alertBox = document.getElementById("alertBox");
    alertBox.innerText = message;
    alertBox.className = `alert ${type}`;
    alertBox.style.display = "block";
    setTimeout(() => { alertBox.style.display = "none"; }, 3000);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω—Å–∫–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
async function loadTasks() {
    const username = document.getElementById('username').value.trim();
    const token = localStorage.getItem('jwt');

    if (!username) {
        showAlert("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", "error");
        return;
    }

    try {
        const response = await fetch(`/api/tasks/admin/${encodeURIComponent(username)}`, {
            method: 'GET',
            headers: { 'Authorization': `Bearer ${token}` }
        });
        if (!response.ok) {
            showAlert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á", "error");
            return;
        }
        const tasks = await response.json();
        renderTasks(tasks);
        displayStatusCounts(tasks);
    } catch (error) {
        showAlert("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏!", "error");
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á:", error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω—Å–∫–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
async function loadAllTasks() {
    const token = localStorage.getItem('jwt');
    try {
        const response = await fetch(`/api/tasks/admin/all`, {
            method: 'GET',
            headers: { 'Authorization': `Bearer ${token}` }
        });
        if (!response.ok) {
            showAlert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∑–∞–¥–∞—á", "error");
            return;
        }
        const tasks = await response.json();
        renderTasks(tasks);
        displayStatusCounts(tasks);
    } catch (error) {
        showAlert("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏!", "error");
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∑–∞–¥–∞—á:", error);
    }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –≤ —Ç–∞–±–ª–∏—Ü—É
function renderTasks(tasks) {
    const taskTable = document.getElementById('taskTable');
    taskTable.innerHTML = '';

    if (tasks.length === 0) {
        taskTable.innerHTML = "<tr><td colspan='6'>–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</td></tr>";
        return;
    }

    tasks.forEach(task => {
        const row = document.createElement('tr');
        const owner = task.user && task.user.username ? task.user.username : "";
        const formattedDeadline = task.deadline ? task.deadline.replace("T", " ") : "";
        row.innerHTML = `
            <td>${task.title}</td>
            <td>${task.description}</td>
            <td>${task.status}</td>
            <td>${formattedDeadline}</td>
            <td>${owner}</td>
            <td>
                <button onclick="openEditForm(${task.id}, '${task.title}', '${task.description}', '${task.status}', '${task.deadline}')">‚úèÔ∏è</button>
                <button onclick="deleteTask(${task.id})">üóëÔ∏è</button>
            </td>
        `;
        taskTable.appendChild(row);
    });
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á—ë—Ç–∞ –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ "statusCounts"
function displayStatusCounts(tasks) {
    const counts = {};
    tasks.forEach(task => {
        const status = task.status || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
        counts[status] = (counts[status] || 0) + 1;
    });
    let output = "–ü–æ–¥—Å—á–µ—Ç –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º: ";
    for (const status in counts) {
        output += `${status}: ${counts[status]}; `;
    }
    document.getElementById("statusCounts").innerText = output;
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
function openEditForm(id, title, description, status, deadline) {
    document.getElementById("editTaskId").value = id;
    document.getElementById("editTitle").value = title;
    document.getElementById("editDescription").value = description;
    document.getElementById("editStatus").value = status;
    document.getElementById("editDeadline").value = deadline;
    document.getElementById("editTaskModal").style.display = "block";
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function closeEditForm() {
    document.getElementById("editTaskModal").style.display = "none";
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∞–¥–º–∏–Ω—Å–∫–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
async function updateTask() {
    const taskId = document.getElementById("editTaskId").value;
    const taskData = {
        title: document.getElementById("editTitle").value,
        description: document.getElementById("editDescription").value,
        status: document.getElementById("editStatus").value,
        deadline: document.getElementById("editDeadline").value
    };

    try {
        const response = await fetch(`/api/tasks/admin/${taskId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('jwt')}`
            },
            body: JSON.stringify(taskData)
        });
        if (response.ok) {
            showAlert("–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!");
            closeEditForm();
            loadTasks();
        } else {
            const error = await response.text();
            showAlert(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ${error}`, "error");
        }
    } catch (error) {
        showAlert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏!", "error");
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", error);
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∞–¥–º–∏–Ω—Å–∫–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
async function deleteTask(taskId) {
    if (!confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É?")) return;
    try {
        const response = await fetch(`/api/tasks/admin/${taskId}`, {
            method: 'DELETE',
            headers: { 'Authorization': `Bearer ${localStorage.getItem('jwt')}` }
        });
        if (response.ok) {
            showAlert("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!");
            loadTasks();
        } else {
            const error = await response.text();
            showAlert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ${error}`, "error");
        }
    } catch (error) {
        showAlert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏!", "error");
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", error);
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (–∞–¥–º–∏–Ω—Å–∫–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–ø—Ä–æ—Å–∞ "username" –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è, –¥–ª—è –∫–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–µ—Ç—Å—è –∑–∞–¥–∞—á–∞
async function addTask() {
    const targetUsername = document.getElementById("username").value.trim();
    const title = document.getElementById("newTitle").value;
    const description = document.getElementById("newDescription").value;
    const status = document.getElementById("newStatus").value;
    const deadline = document.getElementById("newDeadline").value;

    if (!targetUsername || !title || !description || !status || !deadline) {
        showAlert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!", "error");
        return;
    }

    const taskData = {
        title: title,
        description: description,
        status: status,
        deadline: deadline
    };

    try {
        const response = await fetch(`/api/tasks/admin?username=${encodeURIComponent(targetUsername)}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('jwt')}`
            },
            body: JSON.stringify(taskData)
        });
        if (response.ok) {
            showAlert("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!");
            loadTasks();
        } else {
            const error = await response.text();
            showAlert(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ${error}`, "error");
        }
    } catch (error) {
        showAlert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏!", "error");
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", error);
    }
}
